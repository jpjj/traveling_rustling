mod input;
mod local_moves;
mod output;
mod penalizer;
mod penalties;
mod py_output;
mod route;
mod solver;
use solver::Solver;

fn main() {
    let distance_matrix = vec![
        vec![
            0, 246, 18405, 2287, 12186, 29736, 20151, 26444, 17532, 18285, 8372, 14886, 6383,
        ],
        vec![
            246, 0, 18220, 2154, 12341, 29711, 20033, 26351, 17335, 18381, 8270, 14939, 6177,
        ],
        vec![
            18405, 18220, 0, 16190, 21607, 20548, 6882, 12978, 1549, 21414, 11248, 17167, 12128,
        ],
        vec![
            2287, 2154, 16190, 0, 11756, 27766, 17879, 24221, 15368, 17178, 6133, 13445, 4349,
        ],
        vec![
            12186, 12341, 21607, 11756, 0, 22685, 19143, 23065, 21609, 7375, 11329, 6713, 14327,
        ],
        vec![
            29736, 29711, 20548, 27766, 22685, 0, 13704, 8593, 21941, 16183, 22012, 16241, 26242,
        ],
        vec![
            20151, 20033, 6882, 17879, 19143, 13704, 0, 6862, 8239, 16782, 11809, 13248, 14850,
        ],
        vec![
            26444, 26351, 12978, 24221, 23065, 8593, 6862, 0, 14494, 18601, 18088, 16441, 21545,
        ],
        vec![
            17532, 17335, 1549, 15368, 21609, 21941, 8239, 14494, 0, 21936, 10845, 17582, 11178,
        ],
        vec![
            18285, 18381, 21414, 17178, 7375, 16183, 16782, 18601, 21936, 0, 14095, 4529, 18284,
        ],
        vec![
            8372, 8270, 11248, 6133, 11329, 22012, 11809, 18088, 10845, 14095, 0, 9673, 4511,
        ],
        vec![
            14886, 14939, 17167, 13445, 6713, 16241, 13248, 16441, 17582, 4529, 9673, 0, 13994,
        ],
        vec![
            6383, 6177, 12128, 4349, 14327, 26242, 14850, 21545, 11178, 18284, 4511, 13994, 0,
        ],
    ];
    let duration_matrix = Some(distance_matrix.clone());
    let job_durations = Some(vec![
        10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800,
    ]);
    let time_windows = Some(vec![
        vec![
            (1735722000, 1735754400),
            (1735808400, 1735840800),
            (1735894800, 1735927200),
            (1735981200, 1736013600),
        ],
        vec![
            (1735722000, 1735754400),
            (1735808400, 1735840800),
            (1735894800, 1735927200),
            (1735981200, 1736013600),
            (1736067600, 1736100000),
        ],
        vec![
            (1735894800, 1735927200),
            (1735981200, 1736013600),
            (1736067600, 1736100000),
            (1736154000, 1736186400),
        ],
        vec![
            (1735981200, 1736013600),
            (1736067600, 1736100000),
            (1736154000, 1736186400),
            (1736240400, 1736272800),
        ],
        vec![
            (1736154000, 1736186400),
            (1736240400, 1736272800),
            (1736326800, 1736359200),
            (1736413200, 1736445600),
        ],
        vec![
            (1736240400, 1736272800),
            (1736326800, 1736359200),
            (1736413200, 1736445600),
            (1736499600, 1736532000),
        ],
        vec![
            (1736326800, 1736359200),
            (1736413200, 1736445600),
            (1736499600, 1736532000),
        ],
        vec![(1736413200, 1736445600), (1736499600, 1736532000)],
        vec![(1736413200, 1736445600), (1736499600, 1736532000)],
        vec![(1736413200, 1736445600), (1736499600, 1736532000)],
        vec![
            (1735722000, 1735754400),
            (1735808400, 1735840800),
            (1736154000, 1736186400),
            (1736240400, 1736272800),
            (1736326800, 1736359200),
            (1736413200, 1736445600),
            (1736499600, 1736532000),
        ],
        vec![
            (1735722000, 1735754400),
            (1735808400, 1735840800),
            (1735894800, 1735927200),
            (1735981200, 1736013600),
            (1736326800, 1736359200),
            (1736413200, 1736445600),
            (1736499600, 1736532000),
        ],
        vec![
            (1735722000, 1735754400),
            (1735808400, 1735840800),
            (1735894800, 1735927200),
            (1735981200, 1736013600),
            (1736067600, 1736100000),
            (1736154000, 1736186400),
            (1736499600, 1736532000),
        ],
    ]);
    let operation_times = Some((21600, 72000));
    let time_limit = Some(1);

    let input = input::get_input_from_raw(
        distance_matrix,
        duration_matrix,
        job_durations,
        time_windows,
        operation_times,
        None,
        None,
        None,
        time_limit,
        None,
    );
    let mut solver = Solver::new(input);
    solver.solve();
    println!("{:?}", solver.best_solution.route.sequence);
    println!("{:?}", solver.iterations);
}
